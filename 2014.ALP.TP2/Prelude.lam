
-- identidad
def id = \x . x 

-- Booleanos
def true = \ t f . t
def false = \t f . f

def and = \a b. a b false
def or  = \a b. a true b

-- Pares
def pair = \x y p . p x y

def fst = \p . p true
def snd = \p . p false

-- Numerales de Church
def zero = \s z . z
def suc = \n s z . s (n s z)

def is0 = \n . n (\ x . false) true

def add = \n m s z . n s (m s z)
def mult = \n m s z . n (m s) z

def pred = \ n . fst (n (\p . pair (snd p) (suc (snd p))) (pair zero zero))

-- resta
def resta =\n m s z . m pred n s z

def resta1 = \n m . m (pred) n

def prod = \n m. n (add m) 0 
def pot = \n m. m (prod n) 1
def eq = \n m. and (is0 (resta m n)) (is0 (resta n m))
--Listas
def nil = \c n . n
def cons = \x xs c n . c x (xs c n)

def isnil = \xs . xs (\x ys . false) true

def snoc = \ xs x. xs cons (cons x nil)

def length = \xs. xs (\x n. suc n) 0

def reverse = \xs. xs (\x rs. snoc rs x) nil

def tail = \xs . fst (xs (\x p. pair (snd p) (cons x (snd p))  ) (pair nil nil))

-- Combinador de Punto Fijo
def Y = \f . (\x . f (x x)) (\x . f (x x))

-- factorial
def fact = Y (\f n. (is0 n) (suc zero) (mult n (f (pred n))))

-- bottom
def bottom = (\x . x x) (\x . x x)
