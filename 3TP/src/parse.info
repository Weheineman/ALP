-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.10 from parse.y
-----------------------------------------------------------------------------

state 8 contains 4 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseStmt -> Def                            (0)
	%start_parseStmts -> Defs                          (1)
	%start_term -> Exp                                 (2)
	Def -> Defexp                                      (3)
	Def -> Exp                                         (4)
	Defexp -> DEF VAR '=' Exp                          (5)
	Exp -> LET VAR '=' Exp IN Exp                      (6)
	Exp -> '\\' VAR ':' Type '.' Exp                   (7)
	Exp -> Exp AS Type                                 (8)
	Exp -> REC Mr Mr Mr                                (9)
	Exp -> Mr                                          (10)
	Mr -> FST Exp                                      (11)
	Mr -> SND Exp                                      (12)
	Mr -> SUC Exp                                      (13)
	Mr -> NAbs                                         (14)
	NAbs -> NAbs Atom                                  (15)
	NAbs -> Atom                                       (16)
	Atom -> VAR                                        (17)
	Atom -> '(' Exp ')'                                (18)
	Atom -> UNIT                                       (19)
	Atom -> ZERO                                       (20)
	Atom -> '(' Exp ',' Exp ')'                        (21)
	Type -> TYPE                                       (22)
	Type -> Type '->' Type                             (23)
	Type -> '(' Type ')'                               (24)
	Type -> TUNIT                                      (25)
	Type -> '(' Type ',' Type ')'                      (26)
	Type -> NAT                                        (27)
	Defs -> Defexp Defs                                (28)
	Defs ->                                            (29)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'='            { TEquals }
	':'            { TColon }
	'\\'           { TAbs }
	'.'            { TDot }
	'('            { TOpen }
	')'            { TClose }
	'->'           { TArrow }
	VAR            { TVar $$ }
	TYPE           { TType }
	DEF            { TDef }
	LET            { TLet }
	IN             { TIn }
	AS             { TAs }
	','            { TComa }
	UNIT           { Tunit }
	TUNIT          { TTUnit }
	FST            { TFst }
	SND            { TSnd }
	REC            { TR }
	SUC            { TSuc }
	ZERO           { TZero }
	NAT            { TTNat }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseStmt rule  0
	%start_parseStmts rule  1
	%start_term     rule  2
	Def             rules 3, 4
	Defexp          rule  5
	Exp             rules 6, 7, 8, 9, 10
	Mr              rules 11, 12, 13, 14
	NAbs            rules 15, 16
	Atom            rules 17, 18, 19, 20, 21
	Type            rules 22, 23, 24, 25, 26, 27
	Defs            rules 28, 29

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'\\'           shift, and enter state 10
	'('            shift, and enter state 11
	VAR            shift, and enter state 12
	DEF            shift, and enter state 5
	LET            shift, and enter state 13
	UNIT           shift, and enter state 14
	FST            shift, and enter state 15
	SND            shift, and enter state 16
	REC            shift, and enter state 17
	SUC            shift, and enter state 18
	ZERO           shift, and enter state 19

	Def            goto state 22
	Defexp         goto state 4
	Exp            goto state 23
	Mr             goto state 7
	NAbs           goto state 8
	Atom           goto state 9

State 1


	DEF            shift, and enter state 5
	%eof           reduce using rule 29

	Defexp         goto state 20
	Defs           goto state 21

State 2


	'\\'           shift, and enter state 10
	'('            shift, and enter state 11
	VAR            shift, and enter state 12
	LET            shift, and enter state 13
	UNIT           shift, and enter state 14
	FST            shift, and enter state 15
	SND            shift, and enter state 16
	REC            shift, and enter state 17
	SUC            shift, and enter state 18
	ZERO           shift, and enter state 19

	Exp            goto state 6
	Mr             goto state 7
	NAbs           goto state 8
	Atom           goto state 9

State 3


	DEF            shift, and enter state 5

	Defexp         goto state 4

State 4

	Def -> Defexp .                                     (rule 3)

	%eof           reduce using rule 3


State 5

	Defexp -> DEF . VAR '=' Exp                         (rule 5)

	VAR            shift, and enter state 34


State 6

	%start_term -> Exp .                                (rule 2)
	Exp -> Exp . AS Type                                (rule 8)

	AS             shift, and enter state 24
	%eof           accept


State 7

	Exp -> Mr .                                         (rule 10)

	'('            reduce using rule 10
	')'            reduce using rule 10
	VAR            reduce using rule 10
	DEF            reduce using rule 10
	IN             reduce using rule 10
	AS             reduce using rule 10
	','            reduce using rule 10
	UNIT           reduce using rule 10
	FST            reduce using rule 10
	SND            reduce using rule 10
	SUC            reduce using rule 10
	ZERO           reduce using rule 10
	%eof           reduce using rule 10


State 8

	Mr -> NAbs .                                        (rule 14)
	NAbs -> NAbs . Atom                                 (rule 15)

	'('            shift, and enter state 11
			(reduce using rule 14)

	')'            reduce using rule 14
	VAR            shift, and enter state 12
			(reduce using rule 14)

	DEF            reduce using rule 14
	IN             reduce using rule 14
	AS             reduce using rule 14
	','            reduce using rule 14
	UNIT           shift, and enter state 14
			(reduce using rule 14)

	FST            reduce using rule 14
	SND            reduce using rule 14
	SUC            reduce using rule 14
	ZERO           shift, and enter state 19
			(reduce using rule 14)

	%eof           reduce using rule 14

	Atom           goto state 33

State 9

	NAbs -> Atom .                                      (rule 16)

	'('            reduce using rule 16
	')'            reduce using rule 16
	VAR            reduce using rule 16
	DEF            reduce using rule 16
	IN             reduce using rule 16
	AS             reduce using rule 16
	','            reduce using rule 16
	UNIT           reduce using rule 16
	FST            reduce using rule 16
	SND            reduce using rule 16
	SUC            reduce using rule 16
	ZERO           reduce using rule 16
	%eof           reduce using rule 16


State 10

	Exp -> '\\' . VAR ':' Type '.' Exp                  (rule 7)

	VAR            shift, and enter state 32


State 11

	Atom -> '(' . Exp ')'                               (rule 18)
	Atom -> '(' . Exp ',' Exp ')'                       (rule 21)

	'\\'           shift, and enter state 10
	'('            shift, and enter state 11
	VAR            shift, and enter state 12
	LET            shift, and enter state 13
	UNIT           shift, and enter state 14
	FST            shift, and enter state 15
	SND            shift, and enter state 16
	REC            shift, and enter state 17
	SUC            shift, and enter state 18
	ZERO           shift, and enter state 19

	Exp            goto state 31
	Mr             goto state 7
	NAbs           goto state 8
	Atom           goto state 9

State 12

	Atom -> VAR .                                       (rule 17)

	'('            reduce using rule 17
	')'            reduce using rule 17
	VAR            reduce using rule 17
	DEF            reduce using rule 17
	IN             reduce using rule 17
	AS             reduce using rule 17
	','            reduce using rule 17
	UNIT           reduce using rule 17
	FST            reduce using rule 17
	SND            reduce using rule 17
	SUC            reduce using rule 17
	ZERO           reduce using rule 17
	%eof           reduce using rule 17


State 13

	Exp -> LET . VAR '=' Exp IN Exp                     (rule 6)

	VAR            shift, and enter state 30


State 14

	Atom -> UNIT .                                      (rule 19)

	'('            reduce using rule 19
	')'            reduce using rule 19
	VAR            reduce using rule 19
	DEF            reduce using rule 19
	IN             reduce using rule 19
	AS             reduce using rule 19
	','            reduce using rule 19
	UNIT           reduce using rule 19
	FST            reduce using rule 19
	SND            reduce using rule 19
	SUC            reduce using rule 19
	ZERO           reduce using rule 19
	%eof           reduce using rule 19


State 15

	Mr -> FST . Exp                                     (rule 11)

	'\\'           shift, and enter state 10
	'('            shift, and enter state 11
	VAR            shift, and enter state 12
	LET            shift, and enter state 13
	UNIT           shift, and enter state 14
	FST            shift, and enter state 15
	SND            shift, and enter state 16
	REC            shift, and enter state 17
	SUC            shift, and enter state 18
	ZERO           shift, and enter state 19

	Exp            goto state 29
	Mr             goto state 7
	NAbs           goto state 8
	Atom           goto state 9

State 16

	Mr -> SND . Exp                                     (rule 12)

	'\\'           shift, and enter state 10
	'('            shift, and enter state 11
	VAR            shift, and enter state 12
	LET            shift, and enter state 13
	UNIT           shift, and enter state 14
	FST            shift, and enter state 15
	SND            shift, and enter state 16
	REC            shift, and enter state 17
	SUC            shift, and enter state 18
	ZERO           shift, and enter state 19

	Exp            goto state 28
	Mr             goto state 7
	NAbs           goto state 8
	Atom           goto state 9

State 17

	Exp -> REC . Mr Mr Mr                               (rule 9)

	'('            shift, and enter state 11
	VAR            shift, and enter state 12
	UNIT           shift, and enter state 14
	FST            shift, and enter state 15
	SND            shift, and enter state 16
	SUC            shift, and enter state 18
	ZERO           shift, and enter state 19

	Mr             goto state 27
	NAbs           goto state 8
	Atom           goto state 9

State 18

	Mr -> SUC . Exp                                     (rule 13)

	'\\'           shift, and enter state 10
	'('            shift, and enter state 11
	VAR            shift, and enter state 12
	LET            shift, and enter state 13
	UNIT           shift, and enter state 14
	FST            shift, and enter state 15
	SND            shift, and enter state 16
	REC            shift, and enter state 17
	SUC            shift, and enter state 18
	ZERO           shift, and enter state 19

	Exp            goto state 26
	Mr             goto state 7
	NAbs           goto state 8
	Atom           goto state 9

State 19

	Atom -> ZERO .                                      (rule 20)

	'('            reduce using rule 20
	')'            reduce using rule 20
	VAR            reduce using rule 20
	DEF            reduce using rule 20
	IN             reduce using rule 20
	AS             reduce using rule 20
	','            reduce using rule 20
	UNIT           reduce using rule 20
	FST            reduce using rule 20
	SND            reduce using rule 20
	SUC            reduce using rule 20
	ZERO           reduce using rule 20
	%eof           reduce using rule 20


State 20

	Defs -> Defexp . Defs                               (rule 28)

	DEF            shift, and enter state 5
	%eof           reduce using rule 29

	Defexp         goto state 20
	Defs           goto state 25

State 21

	%start_parseStmts -> Defs .                         (rule 1)

	%eof           accept


State 22

	%start_parseStmt -> Def .                           (rule 0)

	%eof           accept


State 23

	Def -> Exp .                                        (rule 4)
	Exp -> Exp . AS Type                                (rule 8)

	AS             shift, and enter state 24
	%eof           reduce using rule 4


State 24

	Exp -> Exp AS . Type                                (rule 8)

	'('            shift, and enter state 42
	TYPE           shift, and enter state 43
	TUNIT          shift, and enter state 44
	NAT            shift, and enter state 45

	Type           goto state 41

State 25

	Defs -> Defexp Defs .                               (rule 28)

	%eof           reduce using rule 28


State 26

	Exp -> Exp . AS Type                                (rule 8)
	Mr -> SUC Exp .                                     (rule 13)

	'('            reduce using rule 13
	')'            reduce using rule 13
	VAR            reduce using rule 13
	DEF            reduce using rule 13
	IN             reduce using rule 13
	AS             reduce using rule 13
	','            reduce using rule 13
	UNIT           reduce using rule 13
	FST            reduce using rule 13
	SND            reduce using rule 13
	SUC            reduce using rule 13
	ZERO           reduce using rule 13
	%eof           reduce using rule 13


State 27

	Exp -> REC Mr . Mr Mr                               (rule 9)

	'('            shift, and enter state 11
	VAR            shift, and enter state 12
	UNIT           shift, and enter state 14
	FST            shift, and enter state 15
	SND            shift, and enter state 16
	SUC            shift, and enter state 18
	ZERO           shift, and enter state 19

	Mr             goto state 40
	NAbs           goto state 8
	Atom           goto state 9

State 28

	Exp -> Exp . AS Type                                (rule 8)
	Mr -> SND Exp .                                     (rule 12)

	'('            reduce using rule 12
	')'            reduce using rule 12
	VAR            reduce using rule 12
	DEF            reduce using rule 12
	IN             reduce using rule 12
	AS             reduce using rule 12
	','            reduce using rule 12
	UNIT           reduce using rule 12
	FST            reduce using rule 12
	SND            reduce using rule 12
	SUC            reduce using rule 12
	ZERO           reduce using rule 12
	%eof           reduce using rule 12


State 29

	Exp -> Exp . AS Type                                (rule 8)
	Mr -> FST Exp .                                     (rule 11)

	'('            reduce using rule 11
	')'            reduce using rule 11
	VAR            reduce using rule 11
	DEF            reduce using rule 11
	IN             reduce using rule 11
	AS             reduce using rule 11
	','            reduce using rule 11
	UNIT           reduce using rule 11
	FST            reduce using rule 11
	SND            reduce using rule 11
	SUC            reduce using rule 11
	ZERO           reduce using rule 11
	%eof           reduce using rule 11


State 30

	Exp -> LET VAR . '=' Exp IN Exp                     (rule 6)

	'='            shift, and enter state 39


State 31

	Exp -> Exp . AS Type                                (rule 8)
	Atom -> '(' Exp . ')'                               (rule 18)
	Atom -> '(' Exp . ',' Exp ')'                       (rule 21)

	')'            shift, and enter state 37
	AS             shift, and enter state 24
	','            shift, and enter state 38


State 32

	Exp -> '\\' VAR . ':' Type '.' Exp                  (rule 7)

	':'            shift, and enter state 36


State 33

	NAbs -> NAbs Atom .                                 (rule 15)

	'('            reduce using rule 15
	')'            reduce using rule 15
	VAR            reduce using rule 15
	DEF            reduce using rule 15
	IN             reduce using rule 15
	AS             reduce using rule 15
	','            reduce using rule 15
	UNIT           reduce using rule 15
	FST            reduce using rule 15
	SND            reduce using rule 15
	SUC            reduce using rule 15
	ZERO           reduce using rule 15
	%eof           reduce using rule 15


State 34

	Defexp -> DEF VAR . '=' Exp                         (rule 5)

	'='            shift, and enter state 35


State 35

	Defexp -> DEF VAR '=' . Exp                         (rule 5)

	'\\'           shift, and enter state 10
	'('            shift, and enter state 11
	VAR            shift, and enter state 12
	LET            shift, and enter state 13
	UNIT           shift, and enter state 14
	FST            shift, and enter state 15
	SND            shift, and enter state 16
	REC            shift, and enter state 17
	SUC            shift, and enter state 18
	ZERO           shift, and enter state 19

	Exp            goto state 52
	Mr             goto state 7
	NAbs           goto state 8
	Atom           goto state 9

State 36

	Exp -> '\\' VAR ':' . Type '.' Exp                  (rule 7)

	'('            shift, and enter state 42
	TYPE           shift, and enter state 43
	TUNIT          shift, and enter state 44
	NAT            shift, and enter state 45

	Type           goto state 51

State 37

	Atom -> '(' Exp ')' .                               (rule 18)

	'('            reduce using rule 18
	')'            reduce using rule 18
	VAR            reduce using rule 18
	DEF            reduce using rule 18
	IN             reduce using rule 18
	AS             reduce using rule 18
	','            reduce using rule 18
	UNIT           reduce using rule 18
	FST            reduce using rule 18
	SND            reduce using rule 18
	SUC            reduce using rule 18
	ZERO           reduce using rule 18
	%eof           reduce using rule 18


State 38

	Atom -> '(' Exp ',' . Exp ')'                       (rule 21)

	'\\'           shift, and enter state 10
	'('            shift, and enter state 11
	VAR            shift, and enter state 12
	LET            shift, and enter state 13
	UNIT           shift, and enter state 14
	FST            shift, and enter state 15
	SND            shift, and enter state 16
	REC            shift, and enter state 17
	SUC            shift, and enter state 18
	ZERO           shift, and enter state 19

	Exp            goto state 50
	Mr             goto state 7
	NAbs           goto state 8
	Atom           goto state 9

State 39

	Exp -> LET VAR '=' . Exp IN Exp                     (rule 6)

	'\\'           shift, and enter state 10
	'('            shift, and enter state 11
	VAR            shift, and enter state 12
	LET            shift, and enter state 13
	UNIT           shift, and enter state 14
	FST            shift, and enter state 15
	SND            shift, and enter state 16
	REC            shift, and enter state 17
	SUC            shift, and enter state 18
	ZERO           shift, and enter state 19

	Exp            goto state 49
	Mr             goto state 7
	NAbs           goto state 8
	Atom           goto state 9

State 40

	Exp -> REC Mr Mr . Mr                               (rule 9)

	'('            shift, and enter state 11
	VAR            shift, and enter state 12
	UNIT           shift, and enter state 14
	FST            shift, and enter state 15
	SND            shift, and enter state 16
	SUC            shift, and enter state 18
	ZERO           shift, and enter state 19

	Mr             goto state 48
	NAbs           goto state 8
	Atom           goto state 9

State 41

	Exp -> Exp AS Type .                                (rule 8)
	Type -> Type . '->' Type                            (rule 23)

	'('            reduce using rule 8
	')'            reduce using rule 8
	'->'           shift, and enter state 47
	VAR            reduce using rule 8
	DEF            reduce using rule 8
	IN             reduce using rule 8
	AS             reduce using rule 8
	','            reduce using rule 8
	UNIT           reduce using rule 8
	FST            reduce using rule 8
	SND            reduce using rule 8
	SUC            reduce using rule 8
	ZERO           reduce using rule 8
	%eof           reduce using rule 8


State 42

	Type -> '(' . Type ')'                              (rule 24)
	Type -> '(' . Type ',' Type ')'                     (rule 26)

	'('            shift, and enter state 42
	TYPE           shift, and enter state 43
	TUNIT          shift, and enter state 44
	NAT            shift, and enter state 45

	Type           goto state 46

State 43

	Type -> TYPE .                                      (rule 22)

	'.'            reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	'->'           reduce using rule 22
	VAR            reduce using rule 22
	DEF            reduce using rule 22
	IN             reduce using rule 22
	AS             reduce using rule 22
	','            reduce using rule 22
	UNIT           reduce using rule 22
	FST            reduce using rule 22
	SND            reduce using rule 22
	SUC            reduce using rule 22
	ZERO           reduce using rule 22
	%eof           reduce using rule 22


State 44

	Type -> TUNIT .                                     (rule 25)

	'.'            reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	'->'           reduce using rule 25
	VAR            reduce using rule 25
	DEF            reduce using rule 25
	IN             reduce using rule 25
	AS             reduce using rule 25
	','            reduce using rule 25
	UNIT           reduce using rule 25
	FST            reduce using rule 25
	SND            reduce using rule 25
	SUC            reduce using rule 25
	ZERO           reduce using rule 25
	%eof           reduce using rule 25


State 45

	Type -> NAT .                                       (rule 27)

	'.'            reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	'->'           reduce using rule 27
	VAR            reduce using rule 27
	DEF            reduce using rule 27
	IN             reduce using rule 27
	AS             reduce using rule 27
	','            reduce using rule 27
	UNIT           reduce using rule 27
	FST            reduce using rule 27
	SND            reduce using rule 27
	SUC            reduce using rule 27
	ZERO           reduce using rule 27
	%eof           reduce using rule 27


State 46

	Type -> Type . '->' Type                            (rule 23)
	Type -> '(' Type . ')'                              (rule 24)
	Type -> '(' Type . ',' Type ')'                     (rule 26)

	')'            shift, and enter state 57
	'->'           shift, and enter state 47
	','            shift, and enter state 58


State 47

	Type -> Type '->' . Type                            (rule 23)

	'('            shift, and enter state 42
	TYPE           shift, and enter state 43
	TUNIT          shift, and enter state 44
	NAT            shift, and enter state 45

	Type           goto state 56

State 48

	Exp -> REC Mr Mr Mr .                               (rule 9)

	'('            reduce using rule 9
	')'            reduce using rule 9
	VAR            reduce using rule 9
	DEF            reduce using rule 9
	IN             reduce using rule 9
	AS             reduce using rule 9
	','            reduce using rule 9
	UNIT           reduce using rule 9
	FST            reduce using rule 9
	SND            reduce using rule 9
	SUC            reduce using rule 9
	ZERO           reduce using rule 9
	%eof           reduce using rule 9


State 49

	Exp -> LET VAR '=' Exp . IN Exp                     (rule 6)
	Exp -> Exp . AS Type                                (rule 8)

	IN             shift, and enter state 55
	AS             shift, and enter state 24


State 50

	Exp -> Exp . AS Type                                (rule 8)
	Atom -> '(' Exp ',' Exp . ')'                       (rule 21)

	')'            shift, and enter state 54
	AS             shift, and enter state 24


State 51

	Exp -> '\\' VAR ':' Type . '.' Exp                  (rule 7)
	Type -> Type . '->' Type                            (rule 23)

	'.'            shift, and enter state 53
	'->'           shift, and enter state 47


State 52

	Defexp -> DEF VAR '=' Exp .                         (rule 5)
	Exp -> Exp . AS Type                                (rule 8)

	DEF            reduce using rule 5
	AS             shift, and enter state 24
	%eof           reduce using rule 5


State 53

	Exp -> '\\' VAR ':' Type '.' . Exp                  (rule 7)

	'\\'           shift, and enter state 10
	'('            shift, and enter state 11
	VAR            shift, and enter state 12
	LET            shift, and enter state 13
	UNIT           shift, and enter state 14
	FST            shift, and enter state 15
	SND            shift, and enter state 16
	REC            shift, and enter state 17
	SUC            shift, and enter state 18
	ZERO           shift, and enter state 19

	Exp            goto state 61
	Mr             goto state 7
	NAbs           goto state 8
	Atom           goto state 9

State 54

	Atom -> '(' Exp ',' Exp ')' .                       (rule 21)

	'('            reduce using rule 21
	')'            reduce using rule 21
	VAR            reduce using rule 21
	DEF            reduce using rule 21
	IN             reduce using rule 21
	AS             reduce using rule 21
	','            reduce using rule 21
	UNIT           reduce using rule 21
	FST            reduce using rule 21
	SND            reduce using rule 21
	SUC            reduce using rule 21
	ZERO           reduce using rule 21
	%eof           reduce using rule 21


State 55

	Exp -> LET VAR '=' Exp IN . Exp                     (rule 6)

	'\\'           shift, and enter state 10
	'('            shift, and enter state 11
	VAR            shift, and enter state 12
	LET            shift, and enter state 13
	UNIT           shift, and enter state 14
	FST            shift, and enter state 15
	SND            shift, and enter state 16
	REC            shift, and enter state 17
	SUC            shift, and enter state 18
	ZERO           shift, and enter state 19

	Exp            goto state 60
	Mr             goto state 7
	NAbs           goto state 8
	Atom           goto state 9

State 56

	Type -> Type . '->' Type                            (rule 23)
	Type -> Type '->' Type .                            (rule 23)

	'.'            reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	'->'           shift, and enter state 47
	VAR            reduce using rule 23
	DEF            reduce using rule 23
	IN             reduce using rule 23
	AS             reduce using rule 23
	','            reduce using rule 23
	UNIT           reduce using rule 23
	FST            reduce using rule 23
	SND            reduce using rule 23
	SUC            reduce using rule 23
	ZERO           reduce using rule 23
	%eof           reduce using rule 23


State 57

	Type -> '(' Type ')' .                              (rule 24)

	'.'            reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	'->'           reduce using rule 24
	VAR            reduce using rule 24
	DEF            reduce using rule 24
	IN             reduce using rule 24
	AS             reduce using rule 24
	','            reduce using rule 24
	UNIT           reduce using rule 24
	FST            reduce using rule 24
	SND            reduce using rule 24
	SUC            reduce using rule 24
	ZERO           reduce using rule 24
	%eof           reduce using rule 24


State 58

	Type -> '(' Type ',' . Type ')'                     (rule 26)

	'('            shift, and enter state 42
	TYPE           shift, and enter state 43
	TUNIT          shift, and enter state 44
	NAT            shift, and enter state 45

	Type           goto state 59

State 59

	Type -> Type . '->' Type                            (rule 23)
	Type -> '(' Type ',' Type . ')'                     (rule 26)

	')'            shift, and enter state 62
	'->'           shift, and enter state 47


State 60

	Exp -> LET VAR '=' Exp IN Exp .                     (rule 6)
	Exp -> Exp . AS Type                                (rule 8)

	'('            reduce using rule 6
	')'            reduce using rule 6
	VAR            reduce using rule 6
	DEF            reduce using rule 6
	IN             reduce using rule 6
	AS             shift, and enter state 24
	','            reduce using rule 6
	UNIT           reduce using rule 6
	FST            reduce using rule 6
	SND            reduce using rule 6
	SUC            reduce using rule 6
	ZERO           reduce using rule 6
	%eof           reduce using rule 6


State 61

	Exp -> '\\' VAR ':' Type '.' Exp .                  (rule 7)
	Exp -> Exp . AS Type                                (rule 8)

	'('            reduce using rule 7
	')'            reduce using rule 7
	VAR            reduce using rule 7
	DEF            reduce using rule 7
	IN             reduce using rule 7
	AS             shift, and enter state 24
	','            reduce using rule 7
	UNIT           reduce using rule 7
	FST            reduce using rule 7
	SND            reduce using rule 7
	SUC            reduce using rule 7
	ZERO           reduce using rule 7
	%eof           reduce using rule 7


State 62

	Type -> '(' Type ',' Type ')' .                     (rule 26)

	'.'            reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	'->'           reduce using rule 26
	VAR            reduce using rule 26
	DEF            reduce using rule 26
	IN             reduce using rule 26
	AS             reduce using rule 26
	','            reduce using rule 26
	UNIT           reduce using rule 26
	FST            reduce using rule 26
	SND            reduce using rule 26
	SUC            reduce using rule 26
	ZERO           reduce using rule 26
	%eof           reduce using rule 26


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 30
Number of terminals: 22
Number of non-terminals: 11
Number of states: 63
