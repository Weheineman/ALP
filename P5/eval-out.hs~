module eval-out (eval) where

import AST


{-class Monoid m where
mempty :: m
mappend :: m -> m -> m

instance Monoid String where
mempty = []
mappend = (++)
-}
newtype Output a = Out (a,String) deriving Show

instance Monad (Output) where 
return a = Out(a,[])
Out(a,w) >>= f = let Out(a',w') = f a
			in Out(a', w' ++ w)

class MonadO m where
write :: String -> m ()

instance MonadO Output where  
--write :: String -> Output ()
write s = Out((),s)


-- Estados
type Env = [(Variable,Int)]

-- Estado nulo
initState :: Env
initState = []

-- Mónada estado
newtype State a = State { runState :: Env -> (a, Env) }

instance Monad State where
    return x = State (\s -> (x, s))
    m >>= f = State (\s -> let (v, s') = runState m s in
                           runState (f v) s')

-- Clase para representar mónadas con estado de variables
class Monad m => MonadState m where
    -- Busca el valor de una variable
    lookfor :: Variable -> m Int
    -- Cambia el valor de una variable
    update :: Variable -> Int -> m ()

instance MonadState State where
    lookfor v = State (\s -> (lookfor' v s, s))
                where lookfor' v ((u, j):ss) | v == u = j
                                             | v /= u = lookfor' v ss
    update v i = State (\s -> ((), update' v i s))
                 where update' v i [] 			= [(v, i)]
                       update' v i ((u, _):ss) | v == u = (v, i):ss
                       update' v i ((u, j):ss) | v /= u = (u, j):(update' v i ss)

-- Evalua un programa en el estado nulo
eval :: Comm -> Env
eval p = snd (runState (evalComm p) initState)

-- Evalua un comando en un estado dado
evalComm :: MonadState m => Comm -> m ()
evalComm Skip = return ()
evalComm (Let x ie) = do i <- (evalIntExp ie)
                         update x i
evalComm (Seq c1 c2) = evalComm c1 >> evalComm c2  
evalComm (Cond be c1 c2) = do 
                             b <- evalBoolExp be
                             if b then (evalComm c1) else (evalComm c2) 
evalComm w@(While be c) = do
                            b <- evalBoolExp be 
                            if b then (evalComm (Seq c w)) else return ()


-- Evalua una expresion entera, sin efectos laterales
evalIntExp :: MonadState m,MonadO m => IntExp -> m Int
evalIntExp (Const i) = do 
			write (show i)
			return i
evalIntExp (Var x) = lookfor x
evalIntExp (UMinus ie) = do 
                            i <- evalIntExp ie
                            return ((-1)*i)
evalIntExp (Plus ie1 ie2) = do i1 <- evalIntExp ie1 
                               i2 <- evalIntExp ie2 
                               return (i1+i2)   
evalIntExp (Minus ie1 ie2) = do i1 <- evalIntExp ie1 
                                i2 <- evalIntExp ie2 
                                return (i1-i2)
evalIntExp (Times ie1 ie2) = do i1 <- evalIntExp ie1 
                                i2 <- evalIntExp ie2 
                                return (i1*i2)
evalIntExp (Div ie1 ie2) = do i1 <- evalIntExp ie1 
                              i2 <- evalIntExp ie2 
                              return (div i1 i2)

-- Evalua una expresion entera, sin efectos laterales
evalBoolExp :: MonadState m => BoolExp -> m Bool
evalBoolExp BTrue = return True
evalBoolExp BFalse = return False
evalBoolExp (Eq ie1 ie2) = do i1 <- evalIntExp ie1 
                              i2 <- evalIntExp ie2 
                              return (i1==i2)
evalBoolExp (Lt ie1 ie2) = do i1 <- evalIntExp ie1 
                              i2 <- evalIntExp ie2 
                              return (i1<i2)
evalBoolExp (Gt ie1 ie2) = do i1 <- evalIntExp ie1 
                              i2 <- evalIntExp ie2 
                              return (i1>i2)
evalBoolExp (And be1 be2) = do b1 <- evalBoolExp be1 
                               b2 <- evalBoolExp be2 
                               return (b1 && b2)                                 
evalBoolExp (Or be1 be2) = do b1 <- evalBoolExp be1
                              b2 <- evalBoolExp be2 
                              return (b1 || b2)
evalBoolExp (Not be) = do b <- evalBoolExp be 
                          return (not b)
                               
